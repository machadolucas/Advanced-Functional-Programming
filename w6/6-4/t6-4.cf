-- Make a  BNF grammar for a language for specifying a sequence of travels to different distances.
-- Let's suppose you start at 0,0 origin. BNF has a hard-coded type "Double" that you may use for
-- specifying both X and Y distance, or alternatively you may specify the angle in which you travel
-- and the distance. Using the Test program generated by BNFC, generate from input some output to
-- show the steps of the trip and (preferably) the end coordinates. Submit both cf and the modified
-- test haskell program (hack the program generated by BNFC).
-- Use a bit of imagination to interpret this as you prefer :)


[].  [Vector] ::= ;
(:). [Vector] ::= Vector "," [Vector] ;
EVect. Vector ::= "(" Double "," Double ")" ;


-- Example of use:
--  echo "(1.1,2.3),(3.3,4.4)," | ./TestT
-- In the output:
--  [Trip]
--  Origin: (0.0, 0.0)
--  Vectors: (3.3, 4.4), (1.1, 2.3),
--  Destination: (4.4,6.7)



